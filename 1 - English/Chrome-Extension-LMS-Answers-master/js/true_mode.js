chrome.storage.sync.get(['true_mode'], function(items) {
	var choise=items['true_mode'];
	if(choise == undefined) choise = false;
	if(choise) on();
});
//Функция перехвата
var f = function(details) {
			if (details.url.indexOf('app.js') !== -1) {
				return {redirectUrl: "data:text/javascript;charset=UTF-8;base64,"};
			}
		};
//Запустить перехват		
function on() {
	chrome.webRequest.onBeforeRequest.addListener(
		f,
		{ urls: ["*://www.cambridgelms.org/*"] }, 
		["blocking"]
	);
}
//Завершить перехват
function off() {
	if( chrome.webRequest.onBeforeRequest.hasListeners() ){
		chrome.webRequest.onBeforeRequest.removeListener(f);
	}
}
//Ожидание команд
chrome.extension.onMessage.addListener(function(request, sender, sendResponse) { 
	if(request.msg==="auto_on") {
		on();
	}
	if(request.msg==="auto_off") {
		off();
	}
});